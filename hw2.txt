Tabloların Oluşturulması

create table qualification(qualId number(3) primary key, qualDesc varchar2(20));
create table position(positionId number(3) primary key, positionDesc varchar2(20));
create table emplevel(levelNo number(3) primary key, lowSalary number(6), highSalary number(6));
create table dept(deptId number(3) primary key, deptname varchar2(20), location varchar2(20), employeeId number(5));
create table employee( employeeId number(5) primary key, lname varchar2(20) NOT NULL, fname varchar2(20) NOT NULL, positionId number(3) references position(positionId), supervisor number(5) references employee(employeeId), hiredate date, salary number(6), commission number(6), deptId number(3) references dept(deptId), qualId number(3) references qualification(qualId));
create table dependent( employeeId number(5), dependentId number(3), depDOB date, relation varchar2(20), constraint d_pk primary key(dependentId,employeeId), constraint dept_empId_fk foreign key(employeeId) references employee(employeeId));
alter table dept add constraint dept_fk foreign key(employeeId) references employee(employeeId);
 


Tablolara Verilerin Girilmesi

INSERT INTO position VALUES (1, 'President');
INSERT INTO position VALUES (2, 'Manager');
INSERT INTO position VALUES (3, 'Programmer');
INSERT INTO position VALUES (4, 'Accountant');
INSERT INTO position VALUES (5, 'Salesman');

INSERT INTO emplevel VALUES (1, 1, 25000);
INSERT INTO emplevel VALUES (2, 25001, 50000);
INSERT INTO emplevel VALUES (3, 50001, 100000);
INSERT INTO emplevel VALUES (4, 100001, 500000);

INSERT INTO qualification VALUES (1, 'Doctorate');
INSERT INTO qualification VALUES (2, 'Masters');
INSERT INTO qualification VALUES (3, 'Bachelors');
INSERT INTO qualification VALUES (4, 'Associates');
INSERT INTO qualification VALUES (5, 'High School');

INSERT INTO dept VALUES (10,'Finance', 'Charlotte', null);
INSERT INTO dept VALUES (20, 'InfoSys', 'New York', null);
INSERT INTO dept VALUES (30, 'Sales', 'Woodbridge', null);
INSERT INTO dept VALUES (40, 'Marketing', 'Los Angeles', null);

INSERT INTO employee VALUES (111, 'Smith', 'John', 1, NULL, 
	TO_DATE ('04/17/1995', 'mm/dd/yyyy'), 265000, 35000, 10, 1);
INSERT INTO employee VALUES (543, 'Dev', 'Derek', 2, 111, 
	TO_DATE ('03/15/2010', 'mm/dd/yyyy'), 80000, 20000, 20, 1);
INSERT INTO employee VALUES (246, 'Houston', 'Larry', 2, 111, 
	TO_DATE ('05/19/1997', 'mm/dd/yyyy'), 150000, 10000, 40, 2);
INSERT INTO employee VALUES (123, 'Roberts', 'Sandi', 2, 111, 
	TO_DATE ('12/01/2006', 'mm/dd/yyyy'), 75000, NULL, 10, 2);
INSERT INTO employee VALUES (433, 'McCall', 'Alex', 3, 543, 
	TO_DATE ('05/10/2012', 'mm/dd/yyyy'), 66500, NULL, 20, 4);
INSERT INTO employee VALUES (135, 'Garner', 'Stanley', 2, 111, 
	TO_DATE ('06/29/2011', 'mm/dd/yyyy'), 45000, 5000, 30, 5);
INSERT INTO employee VALUES (200, 'Shaw', 'Jinku', 5, 135, 
	TO_DATE ('01/02/2015', 'mm/dd/yyyy'), 24500, 3000, 30, NULL);
INSERT INTO employee VALUES (222, 'Chen', 'Sunny', 4, 123, 
	TO_DATE ('08/15/2014', 'mm/dd/yyyy'), 35000, NULL, 10, 3);

INSERT INTO dependent VALUES (543, 1, TO_DATE ('09/28/1958', 'mm/dd/yyyy'), 'Spouse');
INSERT INTO dependent VALUES (543, 2, TO_DATE ('10/14/1988', 'mm/dd/yyyy'), 'Son');
INSERT INTO dependent VALUES (200, 1, TO_DATE ('06/10/1976', 'mm/dd/yyyy'), 'Spouse');
INSERT INTO dependent VALUES (222, 1, TO_DATE ('02/04/1975', 'mm/dd/yyyy'), 'Spouse');

UPDATE dept SET employeeId=123 WHERE deptId=10;
UPDATE dept SET employeeId=543 WHERE deptId=20;
UPDATE dept SET employeeId=135 WHERE deptId=30;
UPDATE dept SET employeeId=246 WHERE deptId=40;
 

   
1.Display employee Jinku Shaw’s department name. 

select deptname from dept where deptId in (select deptId from employee where fname='Jinku' AND lname='Shaw');
 

2.Find name of the supervisor for employee number 433.

select fname, lname from employee where employeeId in (select supervisor from employee where employeeId = 433);

 
3.Who has same qualification as Stanley Garner?

select fname, lname from employee where qualId in (select qualId from employee where fname = 'Stanley' AND lname = 'Garner');

 
4.Which department has more employees than department 20?

select deptname from dept where (select count(*) from employee where deptId = dept.deptId) > (select count(*) from employee where deptId = 20);

 
5.Which employees are working in the company longer than Larry Houston?

select fname, lname from employee where hiredate < (select hiredate from employee where fname = 'Larry' AND lname = 'Houston');
 

6.Find all employees in the sales department by using a nested query.

select fname, lname from employee where deptID in (select deptId from dept where deptname = 'Sales');
 

7.Create a new table, EMP30, and populate it with employees in department 30, using an existing table and a subquery.  Use EmployeeId, Lname, Fname, HireDate and Salary columns.

create table emp30 (employeeId number(5), fname varchar(20), lname varchar(20), hiredate date, salary number(6));
 
insert into emp30 (employeeId,fname,lname,hiredate,salary) select employeeId,fname,lname,hiredate,salary from employee where employee.deptId = 30;

select * from emp30;

 
8.Add more rows to EMP30 table with employee in department 40.  Do not transfer employee’s salary.

insert into emp30 (employeeId,fname,lname,hiredate) select employeeId,fname,lname,hiredate from employee where employee.deptId = 40;
select * from emp30;
 

9.Use multiple level subquery to display dependent information for employees, who belong to FINANCE department.

select e.employeeId, d.dependentId, d.depDOB, d.relation from dependent d, employee e, dept where d.employeeId = e.employeeId AND e.deptId = dept.deptId AND dept.deptname = 'Finance';
 

10.Use set operator and subquery to find employees, who do not have any dependents.

select fname,lname,employeeId from employee where employeeId not in (select employeeId from dependent);
 

11.Write a subquery that finds average salary by each department.  Check to find if employee 543’s salary satisfies =ANY, <ANY, >ANY, <ALL, or >ALL condition against those departmental average salaries.

select deptId, avg(salary) as avg_salary from employee group by deptId;

select employeeId, salary  from employee where (
salary = ANY (select avg(salary) as avgSalary from employee group by deptId having deptId = employee.deptId )
       or salary < ANY (select avg(salary) as avgSalary from employee group by deptId having deptId = employee.deptId )
       or salary > ANY (select avg(salary) as avgSalary from employee group by deptId having deptId = employee.deptId )
       or salary < ALL (select avg(salary) as avgSalary from employee group by deptId having deptId = employee.deptId )
       or salary > ALL (select avg(salary) as avgSalary from employee group by deptId having deptId = employee.deptId )
) AND employeeId = 543;
 

 




