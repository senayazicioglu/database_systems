1.  En az 8 tane tablonun bulunduğu, tablo isimleri ve özniteliklerin Türkçe olarak tanımlandığı (Create Table …) SQL cümleciklerinin hazırlanması gerekmektedir. 

CREATE TABLE Urunler (
  urun_id INTEGER PRIMARY KEY,
  urun_isim VARCHAR(50) NOT NULL,
  urun_aciklama VARCHAR(255),
  kategori_id INTEGER,
  marka_id INTEGER,
  renk_id INTEGER,
  beden_id INTEGER,
  fiyat DECIMAL(10, 2));

CREATE TABLE Kategoriler (
  kategori_id INTEGER PRIMARY KEY,
  kategori_isim VARCHAR(50) NOT NULL);

CREATE TABLE Markalar (
  marka_id INTEGER PRIMARY KEY,
  marka_isim VARCHAR(50) NOT NULL);

CREATE TABLE Renkler (
  renk_id INTEGER PRIMARY KEY,
  renk_adi VARCHAR(50) NOT NULL);

CREATE TABLE Bedenler (
  beden_id INTEGER PRIMARY KEY,
  beden_adi VARCHAR(50) NOT NULL);
CREATE TABLE Musteriler (
  musteri_id INTEGER PRIMARY KEY,
  isim VARCHAR(50) NOT NULL,
  soyisim VARCHAR(50) NOT NULL,
  mail VARCHAR(50) UNIQUE,
  tel_no VARCHAR(11));

CREATE TABLE Siparisler (
  siparis_id INTEGER PRIMARY KEY,
  musteri_id INTEGER,
  siparis_tarih DATE,
  toplam_tutar DECIMAL(10, 2));

CREATE TABLE Siparis_Oge (
  siparis_id INTEGER,
  urun_id INTEGER,
  miktar INTEGER,
  PRIMARY KEY (siparis_id, urun_id),
  FOREIGN KEY (siparis_id) REFERENCES Siparisler(siparis_id),
  FOREIGN KEY (urun_id) REFERENCES Urunler(urun_id));



2. Seçmiş olduğunuz veri tabanı tablolarının indekslerini oluşturunuz (create index on).

CREATE INDEX index_urun_kategori ON Urunler (kategori_id);
CREATE INDEX index_urun_marka ON Urunler (marka_id);
CREATE INDEX index_urun_renk ON Urunler (renk_id);
CREATE INDEX index_urun_beden ON Urunler (beden_id);
CREATE INDEX index_siparis_musteri ON Siparisler (musteri_id);
CREATE INDEX index_siparis_oge_siparis ON Siparis_Oge (siparis_id);
CREATE INDEX index_siparis_oge_urun ON Siparis_Oge (urun_id);
CREATE INDEX index_musteri_mail ON Musteriler (mail);
CREATE INDEX index_siparis_tarih ON Siparisler (siparis_tarih);
CREATE INDEX index_category_name ON Kategoriler (kategori_isim);
CREATE INDEX index_brand_name ON Markalar (marka_isim);
CREATE INDEX index_color_name ON Renkler (renk_adi);
CREATE INDEX index_size_name ON Bedenler (beden_adi);



3. Her tabloya, önce tanım tablolarına sonra detay(hareket) tablolarına olmak üzere veri girişini gerçekleştiriniz (insert into tablo1 values()…)

INSERT INTO Kategoriler (kategori_id, kategori_isim) VALUES (1, 'Sweatshirt');
INSERT INTO Kategoriler (kategori_id, kategori_isim) VALUES (2, 'Pantolon');
INSERT INTO Kategoriler (kategori_id, kategori_isim) VALUES (3, 'Trençkot');

INSERT INTO Markalar (marka_id, marka_isim) VALUES (1, 'Nike');
INSERT INTO Markalar (marka_id, marka_isim) VALUES (2, 'Adidas');
INSERT INTO Markalar (marka_id, marka_isim) VALUES (3, 'Hummel');

INSERT INTO Renkler (renk_id, renk_adi) VALUES (1, 'Siyah');
INSERT INTO Renkler (renk_id, renk_adi) VALUES (2, 'Beyaz');
INSERT INTO Renkler (renk_id, renk_adi) VALUES (3, 'Mor');
INSERT INTO Renkler (renk_id, renk_adi) VALUES (4, 'Kırmızı');

INSERT INTO Bedenler (beden_id, beden_adi) VALUES (1, 'S');
INSERT INTO Bedenler (beden_id, beden_adi) VALUES (2, 'M');
INSERT INTO Bedenler (beden_id, beden_adi) VALUES (3, 'L');

INSERT INTO Urunler (urun_id, urun_isim, urun_aciklama, kategori_id, marka_id, renk_id, beden_id, fiyat) VALUES (1, 'Erkek Sweatshirt', 'Oversize', 1, 1, 2, 1, 199.99);
INSERT INTO Urunler (urun_id, urun_isim, urun_aciklama, kategori_id, marka_id, renk_id, beden_id, fiyat) VALUES (2, 'Kadın Pantolon', 'Spor giyim', 2, 2, 1, 3, 249.99);
INSERT INTO Urunler (urun_id, urun_isim, urun_aciklama, kategori_id, marka_id, renk_id, beden_id, fiyat) VALUES (3, 'Kadın Trençkot', 'Mevsimlik', 3, 3, 3, 3, 699.99);

INSERT INTO Musteriler (musteri_id, isim, soyisim, mail, tel_no) VALUES (1, 'Enes', 'Yalçın', 'enes.yalcin@xmail.com', '05777777777');
INSERT INTO Musteriler (musteri_id, isim, soyisim, mail, tel_no) VALUES (2, 'Gufran', 'Kömleksiz', 'gufran.komleksiz@xmail.com', '05999999999');

INSERT INTO Siparisler (siparis_id, musteri_id, siparis_tarih, toplam_tutar) VALUES (1, 1, '2023-01-30', 449.98);
INSERT INTO Siparisler (siparis_id, musteri_id, siparis_tarih, toplam_tutar) VALUES (2, 2, '2023-04-29', 199.99);

INSERT INTO Siparis_Oge (siparis_id, urun_id, miktar) VALUES (1, 1, 2);
INSERT INTO Siparis_Oge (siparis_id, urun_id, miktar) VALUES (2, 1, 1);
INSERT INTO Siparis_Oge (siparis_id, urun_id, miktar) VALUES (2, 3, 1);



4. Hazırlamış olduğunuz veri tabanına göre,  senaryolar oluşturunuz ve bir tablodan satırları filtreleyiniz. Filtreleme yaparken Select ve Where deyimlerini kullanmanız gereklidir.

Tüm ürünleri listeleme:
SELECT * FROM Urunler;


Belirli bir renkteki ürünleri listeleme:
SELECT * FROM Urunler WHERE renk_id = 2;

Belirli bir tarihten sonraki siparişleri listeleme:
SELECT * FROM Siparisler WHERE siparis_tarih > '2023-02-01';

İki fiyat aralığındaki ürünleri verme:
SELECT * FROM Urunler WHERE fiyat BETWEEN 200 AND 1000;

Belirli bir marka ve beden boyutuna ait ürünleri listeleme:
SELECT * FROM Urunler WHERE marka_id = 2 AND beden_id = 3;



5. Birden çok tabloyu kullanabileceğiniz bir senaryo oluşturunuz. Filtreleme yaparken Select Where ve Join deyimlerini kullanmanız gereklidir.

'Nike' markasına ait tüm ürünlerin listesini görüntüleme:
SELECT Urunler.urun_id, Urunler.urun_isim, Urunler.fiyat, Markalar.marka_isim
FROM Urunler
JOIN Markalar ON Urunler.marka_id = Markalar.marka_id
WHERE Markalar.marka_isim = 'Nike';



6. Toplamsal fonksiyonları kullanabileceğiniz count, max, min, avg, sum gibi) senaryolar oluşturup, Select, Group by, Having, Order By deyimlerini kullanabileceğiniz senaryoların birden çok SQL deyimlerini yazınız (en az dört farklı senaryo için SQL ifadelerini oluşturunuz).

En pahalı ürünün fiyatını bulma:
SELECT MAX(fiyat) as en_pahali_urun_fiyati FROM Urunler;

Ürünlerin ortalama fiyatını hesaplama:
SELECT AVG(fiyat) AS ortalama_fiyat FROM Urunler;


Kategorilere göre ürün sayısını bulma:
SELECT Kategoriler.kategori_isim, COUNT(Urunler.urun_id) as urun_sayisi
FROM Kategoriler
JOIN Urunler ON Kategoriler.kategori_id = Urunler.kategori_id
GROUP BY Kategoriler.kategori_id
ORDER BY urun_sayisi DESC;

Her markanın ortalama fiyatını bulma:
SELECT Markalar.marka_isim, AVG(Urunler.fiyat) as ortalama_fiyat
FROM Markalar
JOIN Urunler ON Markalar.marka_id = Urunler.marka_id
GROUP BY Markalar.marka_isim;


7. Veri tabanınıza eklemiş olduğunuz satırların bazılarını değiştirmek için Update deyimini kullanan bir SQL cümleciği çalıştırınız.
Urunler tablosundaki urun_id'si 3 olan ürünün fiyatını 999.99 olarak güncelleme:
UPDATE Urunler SET fiyat = 999.99 WHERE urun_id = 3;
SELECT * FROM Urunler;


8. Veri tabanınıza eklemiş olduğunuz satırların bazılarını silmek için Delete deyimini kullanan bir SQL cümleciği çalıştırınız.
"Urunler" tablosundaki fiyatı 500’den düşük olan tüm ürünleri silme:
DELETE FROM Urunler WHERE fiyat < 500;
SELECT *FROM Urunler;

